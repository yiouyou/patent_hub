frappe.ui.form.on('Claims To Docx', {
  refresh(frm) {
    frm.add_custom_button(__('‚Üí Tech To Claims'), () => {
      if (frm.doc.tech_to_claims_id) {
        frappe.set_route('Form', 'Tech To Claims', frm.doc.tech_to_claims_id);
      } else {
        frappe.msgprint(__('No associated Tech To Claims found.'));
      }
    });
    frm.add_custom_button(__('+ Docx Proofreading'), () => {
      if (!frm.doc.is_done) {
        frappe.show_alert({ message: '‰ªªÂä°Êú™ÂÆåÊàêÔºå‰∏çËÉΩ‰∏ã‰∏ÄÊ≠•„ÄÇ', indicator: 'red' }, 7);
        return;
      }
      // ‰ΩøÁî® Promise Â§ÑÁêÜÂºÇÊ≠•Êìç‰Ωú
      get_file_content(frm, 'markdown_before_tex')
        .then(markdown_before_tex_content => {
          frappe.new_doc('Docx Proofreading', {}, (doc) => {
            doc.writer_id = frm.doc.writer_id
            doc.patent_id = frm.doc.patent_id
            doc.scene_to_tech_id = frm.doc.scene_to_tech_id
            doc.tech_to_claims_id = frm.doc.tech_to_claims_id
            doc.patent_title = frm.doc.patent_title
            doc.claims_to_docx_id = frm.doc.claims_to_docx_id
            doc.markdown_before_tex = markdown_before_tex_content || "Ëé∑ÂèñÂÜÖÂÆπÂ§±Ë¥•"
            doc.save();
          });
        })
        .catch(error => {
          // Â¶ÇÊûúËé∑ÂèñÊñá‰ª∂ÂÜÖÂÆπÂ§±Ë¥•Ôºå‰ªçÁÑ∂ÂàõÂª∫ÊñáÊ°£‰ΩÜ‰ΩøÁî®ÈªòËÆ§ÂÄº
          console.warn('Ëé∑Âèñ markdown_before_tex ÂÜÖÂÆπÂ§±Ë¥•:', error.message);
          frappe.new_doc('Docx Proofreading', {}, (doc) => {
            doc.writer_id = frm.doc.writer_id
            doc.patent_id = frm.doc.patent_id
            doc.scene_to_tech_id = frm.doc.scene_to_tech_id
            doc.tech_to_claims_id = frm.doc.tech_to_claims_id
            doc.patent_title = frm.doc.patent_title
            doc.claims_to_docx_id = frm.doc.claims_to_docx_id
            doc.markdown_before_tex = `Ëé∑ÂèñÂÜÖÂÆπÂ§±Ë¥•: ${error.message}`
            doc.save();
          });
          frappe.show_alert({ 
            message: `‚ö†Ô∏è Êó†Ê≥ïËé∑ÂèñÊñá‰ª∂ÂÜÖÂÆπÔºåÂ∑≤‰ΩøÁî®ÈªòËÆ§ÂÄºÂàõÂª∫ÊñáÊ°£`, 
            indicator: 'orange'
          }, 5);
        });
    });
    // ‚úÖ ËøêË°å‰ªªÂä°ÊåâÈíÆ
    frm.add_custom_button(__('‚ñ∂Ô∏è Run'), async function () {
      try {
        // üü° ÂÖàÂ§ÑÁêÜÊú™‰øùÂ≠òÁöÑÊñ∞ÊñáÊ°£Ôºànew-claims-to-docx-xxxÔºâ
        if (frm.is_new()) {
          await frm.save();      // ‰øùÂ≠ò
          await frm.reload_doc();  // ÂøÖÈ°ªÂà∑Êñ∞Ëé∑ÂèñÊñ∞ name
        }
        // üü° ÂÜçÂ§ÑÁêÜËÑèÊï∞ÊçÆÔºàÂ∑≤Â≠òÂú®‰ΩÜÊúâ‰øÆÊîπÔºâ
        if (frm.is_dirty()) {
          await frm.save();
          await frm.reload_doc();  // ‰øùËØÅÊúÄÊñ∞Áä∂ÊÄÅ
        }
        // üü¢ Áä∂ÊÄÅÂà§Êñ≠
        if (frm.doc.is_done) {
          frappe.show_alert({ message: '‰ªªÂä°Â∑≤ÂÆåÊàêÔºå‰∏çÂèØÈáçÂ§çËøêË°å„ÄÇ', indicator: 'orange' }, 7);
          return;
        }
        if (frm.doc.is_running) {
          frappe.show_alert({ message: '‰ªªÂä°Ê≠£Âú®ËøêË°å‰∏≠ÔºåËØ∑Á®çÂÄôÂÆåÊàê„ÄÇ', indicator: 'orange' }, 7);
          return;
        }
        // üü† Ê£ÄÊü• claims Â≠óÊÆµ
        if (!frm.doc.claims) {
          frappe.show_alert({ message: '‚ùóËØ∑ÂÖàÂ°´ÂÜô Claims ÂÜçËøêË°å‰ªªÂä°„ÄÇ', indicator: 'red' }, 7);
          return;
        }
        // üöÄ Êèê‰∫§‰ªªÂä°
        const res = await frappe.call({
          method: 'patent_hub.api.run_claims_to_docx.run',
          args: { docname: frm.doc.name },
          freeze: true,
          freeze_message: '‰ªªÂä°Êèê‰∫§‰∏≠ÔºåËØ∑Á®çÂÄô...'
        });
        if (res.message?.success) {
          frappe.show_alert({ message: '‚úÖ ‰ªªÂä°Â∑≤Êèê‰∫§ÔºåÁ®çÂêé‰ºöËá™Âä®Âà∑Êñ∞ÁªìÊûú„ÄÇ', indicator: 'blue' }, 7);
        } else {
          throw new Error(res.message?.error || 'Êú™Áü•ÈîôËØØ');
        }
      } catch (err) {
        frappe.show_alert({
          message: `‚ùå Êèê‰∫§Â§±Ë¥•Ôºö${err.message}`,
          indicator: 'red'
        }, 6);
      }
    });
    // üîÅ Âà∑Êñ∞ÈìæÊé•ÊåâÈíÆ
    frm.add_custom_button(__('üîÅ Âà∑Êñ∞ÈìæÊé•'), async function () {
      if (frm.is_dirty()) {
        await frm.save();
      }
      await frappe.call({
        method: 'patent_hub.api.run_claims_to_docx.generate_signed_urls',
        args: { docname: frm.doc.name },
        freeze: true,
        freeze_message: 'ÁîüÊàêÈ¢ÑËßàÈìæÊé•‰∏≠...'
      });
      await frm.reload_doc();
      frappe.show_alert({ message: '‚úÖ Â∑≤Âà∑Êñ∞ÈìæÊé•', indicator: 'blue' }, 7);
      // Âà∑Êñ∞ÂêéÊõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
      update_download_buttons(frm);
    });
    // üîî ÂÆûÊó∂‰∫ã‰ª∂ÁªëÂÆö
    if (!frm._realtime_bound) {
      frappe.realtime.on('claims_to_docx_done', data => {
        if (data.docname === frm.doc.name) {
          frappe.show_alert({ message: 'üìÑ ÊñáÊ°£Â∑≤ÁîüÊàêÂÆåÊàêÔºÅ', indicator: 'blue' }, 7);
          frm.reload_doc().then(() => {
            update_download_buttons(frm);
          });
        }
      });
      frappe.realtime.on('claims_to_docx_failed', data => {
        if (data.docname === frm.doc.name) {
          frappe.show_alert({ message: `‚ùå ÁîüÊàêÂ§±Ë¥•Ôºö${data.error}`, indicator: 'red' }, 7);
          frm.reload_doc().then(() => {
            update_download_buttons(frm);
          });
        }
      });
      frm._realtime_bound = true;
    }
    setup_clickable_column(frm);
    update_download_buttons(frm);
  },
  // Â§ÑÁêÜ final_markdown ÊåâÈíÆÁÇπÂáª
  final_markdown: function(frm) {
    // console.log('final_markdown button clicked');
    handle_download_click(frm, 'markdown');
  },
  // Â§ÑÁêÜ final_docx ÊåâÈíÆÁÇπÂáª
  final_docx: function(frm) {
    // console.log('final_docx button clicked');
    handle_download_click(frm, 'docx');
  },
  // Â§ÑÁêÜ markdown_before_tex ÊåâÈíÆÁÇπÂáª
  'markdown_before_tex': function(frm) {
    handle_download_click(frm, 'markdown_before_tex');
  }
});


// Ê£ÄÊü•ÈìæÊé•ÊòØÂê¶ËøáÊúüÔºà1Â∞èÊó∂Ôºâ
function is_url_expired(generated_at) {
  if (!generated_at) {
    // console.log('No generated_at timestamp');
    return true;
  }
  // Â§ÑÁêÜ‰∏çÂêåÁöÑÊó∂Èó¥Ê†ºÂºè
  let generated;
  if (typeof generated_at === 'string') {
    // Frappe ÈÄöÂ∏∏ËøîÂõû "YYYY-MM-DD HH:mm:ss" Ê†ºÂºè
    generated = frappe.datetime.str_to_obj(generated_at);
  } else {
    generated = new Date(generated_at);
  }
  const now = frappe.datetime.now_datetime();
  const nowObj = frappe.datetime.str_to_obj(now);
  // ËÆ°ÁÆóÊó∂Èó¥Â∑ÆÔºàÊØ´ÁßíÔºâ
  const diffMs = nowObj.getTime() - generated.getTime();
  const diffHours = diffMs / (1000 * 60 * 60);
  // console.log('Generated at:', generated_at);
  // console.log('Generated obj:', generated);
  // console.log('Now:', now);
  // console.log('Now obj:', nowObj);
  // console.log(`URL age: ${diffHours.toFixed(2)} hours`);
  return diffHours >= 1;
}


// ‰ªé s3_url ‰∏≠ÊâæÂà∞ÂØπÂ∫îÁöÑÊñá‰ª∂
function find_file_by_type(files, type) {
  // console.log('Looking for file type:', type);
  // console.log('Available files:', files);
  if (!files || !Array.isArray(files)) return null;
  for (let file of files) {
    // console.log('Checking file:', file.s3_url);
    if (!file.s3_url) continue;
    if (type === 'markdown') {
      // final_markdown ‰ª• "c2d/input_text.txt" ÁªìÂ∞æ
      if (file.s3_url.endsWith('c2d/input_text.txt')) {
        // console.log('Found markdown file:', file);
        return file;
      }
    } else if (type === 'markdown_before_tex') {
      // markdown_before_tex ‰ª• "c-tex/input_text.txt" ÁªìÂ∞æ
      if (file.s3_url.endsWith('c-tex/input_text.txt')) {
        return file;
      }
    } else if (type === 'docx') {
      // final_docx ‰ª• "c2d/*.docx" ÁªìÂ∞æ‰∏î‰∏çÊòØÊåáÂÆöÁöÑ4‰∏™docx
      if (file.s3_url.includes('c2d/') && file.s3_url.endsWith('.docx')) {
        const filename = file.s3_url.split('/').pop();
        const excluded_files = ['abstract.docx', 'claims.docx', 'description.docx', 'figures.docx'];
        if (!excluded_files.includes(filename)) {
          // console.log('Found docx file:', file);
          return file;
        }
      }
    }
  }
  console.log('No matching file found for type:', type);
  return null;
}


// Êõ¥Êñ∞‰∏ãËΩΩÊåâÈíÆÁä∂ÊÄÅ
function update_download_buttons(frm) {
  // console.log('Updating download buttons...');
  const markdown_before_tex_file = find_file_by_type(frm.doc.generated_files, 'markdown_before_tex');
  const markdown_file = find_file_by_type(frm.doc.generated_files, 'markdown');
  const docx_file = find_file_by_type(frm.doc.generated_files, 'docx');
  console.log('Markdown before tex file found:', !!markdown_before_tex_file);
  console.log('Markdown file found:', !!markdown_file);
  console.log('Docx file found:', !!docx_file);
  // Êõ¥Êñ∞ markdown_before_tex ÊåâÈíÆ
  const markdown_before_tex_field = frm.get_field('markdown_before_tex');
  if (markdown_before_tex_field && markdown_before_tex_field.$input) {
    const markdown_before_tex_valid = markdown_before_tex_file && 
                                     markdown_before_tex_file.signed_url && 
                                     !is_url_expired(markdown_before_tex_file.signed_url_generated_at);
    // console.log('Markdown Before Tex button valid:', markdown_before_tex_valid);
    if (markdown_before_tex_valid) {
      markdown_before_tex_field.$input.removeClass('btn-default').addClass('btn-primary');
      markdown_before_tex_field.$input.prop('disabled', false);
      markdown_before_tex_field.$input.css('opacity', '1');
    } else {
      markdown_before_tex_field.$input.removeClass('btn-primary').addClass('btn-default');
      markdown_before_tex_field.$input.prop('disabled', true);
      markdown_before_tex_field.$input.css('opacity', '0.5');
    }
  }
  // Êõ¥Êñ∞ markdown ÊåâÈíÆ
  const markdown_field = frm.get_field('final_markdown');
  if (markdown_field && markdown_field.$input) {
    const markdown_valid = markdown_file && 
                          markdown_file.signed_url && 
                          !is_url_expired(markdown_file.signed_url_generated_at);
    // console.log('Markdown button valid:', markdown_valid);
    if (markdown_valid) {
      markdown_field.$input.removeClass('btn-default').addClass('btn-primary');
      markdown_field.$input.prop('disabled', false);
      markdown_field.$input.css('opacity', '1');
    } else {
      markdown_field.$input.removeClass('btn-primary').addClass('btn-default');
      markdown_field.$input.prop('disabled', true);
      markdown_field.$input.css('opacity', '0.5');
    }
  }
  // Êõ¥Êñ∞ docx ÊåâÈíÆ
  const docx_field = frm.get_field('final_docx');
  if (docx_field && docx_field.$input) {
    const docx_valid = docx_file && 
                      docx_file.signed_url && 
                      !is_url_expired(docx_file.signed_url_generated_at);
    // console.log('Docx button valid:', docx_valid);
    if (docx_valid) {
      docx_field.$input.removeClass('btn-default').addClass('btn-primary');
      docx_field.$input.prop('disabled', false);
      // docx_field.$input.css('opacity', '1');
    } else {
      docx_field.$input.removeClass('btn-primary').addClass('btn-default');
      docx_field.$input.prop('disabled', true);
      // docx_field.$input.css('opacity', '0.5');
    }
  }
}


// Â§ÑÁêÜ‰∏ãËΩΩÊåâÈíÆÁÇπÂáª
async function handle_download_click(frm, type) {
  // console.log('Handle download click for type:', type);
  const file = find_file_by_type(frm.doc.generated_files, type);
  if (!file) {
    let file_type_name;
    switch(type) {
      case 'markdown': file_type_name = 'Markdown'; break;
      case 'markdown_before_tex': file_type_name = 'Markdown Before Tex'; break;
      case 'docx': file_type_name = 'DOCX'; break;
      default: file_type_name = type;
    }
    frappe.msgprint({
      title: 'Êñá‰ª∂Êú™ÊâæÂà∞',
      message: `Êú™ÊâæÂà∞ÂØπÂ∫îÁöÑ${type === 'markdown' ? 'Markdown' : 'DOCX'}Êñá‰ª∂`,
      indicator: 'red'
    });
    return;
  }
  // console.log('Found file:', file);
  if (!file.signed_url) {
    frappe.msgprint({
      title: 'ÈìæÊé•Êú™ÁîüÊàê',
      message: 'ËØ∑ÂÖàÁÇπÂáª"üîÅ Âà∑Êñ∞ÈìæÊé•"ÊåâÈíÆÁîüÊàê‰∏ãËΩΩÈìæÊé•',
      indicator: 'orange'
    });
    return;
  }
  if (is_url_expired(file.signed_url_generated_at)) {
    console.log('URL expired');
    frappe.msgprint({
      title: 'ÈìæÊé•Â∑≤ËøáÊúü',
      message: '‰∏ãËΩΩÈìæÊé•Â∑≤ËøáÊúüÔºàË∂ÖËøá1Â∞èÊó∂ÔºâÔºåËØ∑ÂÖàÁÇπÂáª"üîÅ Âà∑Êñ∞ÈìæÊé•"ÊåâÈíÆ',
      indicator: 'orange'
    });
    return;
  }
  // ÂºÄÂßã‰∏ãËΩΩ
  try {
    // ‰ªé s3_url ‰∏≠ÊèêÂèñÊñá‰ª∂Âêç
    const filename = file.s3_url.split('/').pop();
    console.log('Starting download for:', filename);
    console.log('Download URL:', file.signed_url);
    frappe.show_alert({ 
      message: `Ê≠£Âú®‰∏ãËΩΩ ${filename}...`, 
      indicator: 'blue' 
    }, 3);
    // ÊñπÊ≥ï1: ‰ΩøÁî® window.open (ÈÄÇÁî®‰∫éÂ§ßÂ§öÊï∞ÊµèËßàÂô®)
    const downloadWindow = window.open(file.signed_url, '_blank');
    // Â¶ÇÊûúÂºπÁ™óË¢´ÈòªÊ≠¢ÔºåÂ∞ùËØïÂÖ∂‰ªñÊñπÊ≥ï
    if (!downloadWindow || downloadWindow.closed || typeof downloadWindow.closed == 'undefined') {
      console.log('Popup blocked, trying alternative method');
      // ÊñπÊ≥ï2: ‰ΩøÁî®ÈöêËóèÁöÑ a Ê†áÁ≠æ
      const link = document.createElement('a');
      link.href = file.signed_url;
      link.download = filename;  // ‰ΩøÁî®Ëá™ÂÆö‰πâÊñá‰ª∂Âêç
      link.target = '_blank';
      link.style.display = 'none';
      // Ê∑ªÂä†Âà∞ DOMÔºåÁÇπÂáªÔºåÁÑ∂ÂêéÁßªÈô§
      document.body.appendChild(link);
      link.click();
      // Âª∂ËøüÁßªÈô§ÔºåÁ°Æ‰øù‰∏ãËΩΩÂºÄÂßã
      setTimeout(() => {
        if (document.body.contains(link)) {
          document.body.removeChild(link);
        }
      }, 100);
    }
    frappe.show_alert({ 
      message: `‚úÖ ${filename} ‰∏ãËΩΩÂ∑≤ÂºÄÂßã`, 
      indicator: 'green' 
    }, 3);
  } catch (error) {
    console.error('Download error:', error);
    frappe.msgprint({
      title: '‰∏ãËΩΩÂ§±Ë¥•',
      message: `‰∏ãËΩΩÂ§±Ë¥•: ${error.message}`,
      indicator: 'red'
    });
  }
}


function setup_clickable_column(frm) {
  let grid_wrapper = frm.fields_dict['generated_files'].grid.wrapper;
  // ÁßªÈô§‰πãÂâçÁöÑÊ†∑ÂºèÂíå‰∫ã‰ª∂
  grid_wrapper.find('style.custom-clickable-style').remove();
  grid_wrapper.off('click.custom-clickable');
  // Ê∑ªÂä† CSS Ê†∑Âºè - Âè™ÈíàÂØπÊï∞ÊçÆË°åÔºå‰∏çÂåÖÊã¨Ë°®Â§¥
  grid_wrapper.append(`
    <style class="custom-clickable-style">
      .grid-body .grid-row [data-fieldname="signed_url"] {
        cursor: pointer !important;
        color: #007bff !important;
        text-decoration: underline !important;
      }
      .grid-body .grid-row [data-fieldname="signed_url"]:hover {
        color: #0056b3 !important;
        background-color: #f8f9fa !important;
      }
      /* Á°Æ‰øùË°®Â§¥‰∏çÂèóÂΩ±Âìç */
      .grid-header [data-fieldname="signed_url"] {
        cursor: default !important;
        color: inherit !important;
        text-decoration: none !important;
      }
    </style>
  `);
  // ‰ΩøÁî®‰∫ã‰ª∂ÂßîÊâò - Âè™ÈíàÂØπÊï∞ÊçÆË°å
  grid_wrapper.on('click.custom-clickable', '.grid-body .grid-row [data-fieldname="signed_url"]', function(e) {
    e.preventDefault();
    e.stopPropagation();
    let $cell = $(this);
    let $row = $cell.closest('.grid-row');
    let row_index = $row.index();
    // ‰ªéÊñáÊ°£Êï∞ÊçÆËé∑ÂèñURLÔºàÊúÄÂèØÈù†ÁöÑÊñπÂºèÔºâ
    let url = frm.doc.generated_files[row_index].signed_url;
    // È™åËØÅURLÊòØÂê¶ÊúâÊïà
    if (!url || url === '' || url === 'undefined') {
      frappe.msgprint({
        title: 'ÈîôËØØ',
        message: 'Êó†ÊïàÁöÑURL',
        indicator: 'red'
      });
      return;
    }
    // Ê£ÄÊü•ÈìæÊé•ÊòØÂê¶ËøáÊúü
    const file = frm.doc.generated_files[row_index];
    if (is_url_expired(file.signed_url_generated_at)) {
      frappe.msgprint({
        title: 'ÈìæÊé•Â∑≤ËøáÊúü',
        message: 'Ê≠§ÈìæÊé•Â∑≤ËøáÊúüÔºàË∂ÖËøá1Â∞èÊó∂ÔºâÔºåËØ∑ÂÖàÁÇπÂáª"üîÅ Âà∑Êñ∞ÈìæÊé•"ÊåâÈíÆ',
        indicator: 'orange'
      });
      return;
    }
    // Á°Æ‰øùURLÊ†ºÂºèÊ≠£Á°Æ
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      url = 'https://' + url;
    }
    // Âú®Êñ∞Á™óÂè£ÊâìÂºÄÈìæÊé•
    try {
      window.open(url, '_blank', 'noopener,noreferrer');
    } catch (error) {
      frappe.msgprint({
        title: 'ÈîôËØØ',
        message: 'Êó†Ê≥ïÊâìÂºÄÈìæÊé•: ' + error.message,
        indicator: 'red'
      });
    }
  });
  // Á≠âÂæÖDOMÊ∏≤ÊüìÂÆåÊàêÂêéÂ∫îÁî®Ê†∑Âºè
  setTimeout(() => {
    apply_clickable_styles(grid_wrapper);
  }, 100);
}


function apply_clickable_styles(grid_wrapper) {
  // Âè™‰∏∫Êï∞ÊçÆË°åÁöÑÊåáÂÆöÂàóÊ∑ªÂä†Ê†∑ÂºèÔºåÊéíÈô§Ë°®Â§¥
  grid_wrapper.find('.grid-body .grid-row [data-fieldname="signed_url"]').each(function() {
    let $cell = $(this);
    let url = $cell.text().trim();
    // Âè™‰∏∫ÊúâÊïàURLÊ∑ªÂä†Ê†∑Âºè
    if (url && url !== '' && url !== 'undefined') {
      $cell.addClass('clickable-url-cell');
    }
  });
}


// Ëé∑ÂèñÊñá‰ª∂ÂÜÖÂÆπÁöÑÂáΩÊï∞
async function get_file_content(frm, type) {
  const file = find_file_by_type(frm.doc.generated_files, type);
  if (!file) {
    throw new Error(`Êú™ÊâæÂà∞ ${type} Êñá‰ª∂`);
  }
  if (!file.signed_url) {
    throw new Error('Êñá‰ª∂ÈìæÊé•Êú™ÁîüÊàêÔºåËØ∑ÂÖàÂà∑Êñ∞ÈìæÊé•');
  }
  if (is_url_expired(file.signed_url_generated_at)) {
    throw new Error('Êñá‰ª∂ÈìæÊé•Â∑≤ËøáÊúüÔºåËØ∑ÂÖàÂà∑Êñ∞ÈìæÊé•');
  }
  try {
    const response = await fetch(file.signed_url);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const content = await response.text();
    return content;
  } catch (error) {
    throw new Error(`Ëé∑ÂèñÊñá‰ª∂ÂÜÖÂÆπÂ§±Ë¥•: ${error.message}`);
  }
}
